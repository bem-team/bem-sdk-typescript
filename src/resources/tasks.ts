// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../core/resource';
import { APIPromise } from '../core/api-promise';
import { RequestOptions } from '../internal/request-options';
import { path } from '../internal/utils/path';

export class Tasks extends APIResource {
  /**
   * Get a Task
   */
  retrieve(taskID: string, options?: RequestOptions): APIPromise<Task> {
    return this._client.get(path`/v1-alpha/tasks/${taskID}`, options);
  }

  /**
   * List Tasks
   */
  list(
    query: TaskListParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<TaskListResponse> {
    return this._client.get('/v1-alpha/tasks', { query, ...options });
  }
}

export interface Task {
  /**
   * The status of the task.
   */
  status: TaskStatus;

  /**
   * Unique ID generated by bem following Segment's KSUID conventions.
   */
  taskID: string;

  /**
   * The type of the task.
   */
  type: 'transformation';

  /**
   * Timestamp when task was initiated.
   */
  createdAt?: string;
}

/**
 * The status of the task.
 */
export type TaskStatus = 'running' | 'completed' | 'failed';

export interface TaskListResponse {
  tasks?: Array<Task>;

  /**
   * The total number of results available.
   */
  totalCount?: number;
}

export interface TaskListParams {
  /**
   * A cursor to use in pagination. `endingBefore` is a task ID that defines your
   * place in the list. For example, if you make a list request and receive 50
   * objects, starting with `tsk_2c9AXIj48cUYJtCuv1gsQtHGDzK`, your subsequent call
   * can include `endingBefore=tsk_2c9AXIj48cUYJtCuv1gsQtHGDzK` to fetch the previous
   * page of the list.
   */
  endingBefore?: string;

  /**
   * This specifies a limit on the number of objects to return, ranging between 1
   * and 100.
   */
  limit?: number;

  /**
   * Specifies sorting behavior. The two options are `asc` and `desc` to sort
   * ascending and descending respectively, with default sort being ascending. Paging
   * works in both directions.
   */
  sortOrder?: 'asc' | 'desc';

  /**
   * A cursor to use in pagination. `startingAfter` is a task ID that defines your
   * place in the list. For example, if you make a list request and receive 50
   * objects, ending with `tsk_2c9AXIj48cUYJtCuv1gsQtHGDzK`, your subsequent call can
   * include `startingAfter=tsk_2c9AXIj48cUYJtCuv1gsQtHGDzK` to fetch the next page
   * of the list.
   */
  startingAfter?: string;

  /**
   * Array with the task statuses, formatted as a CSV array.
   */
  status?: TaskStatus;

  /**
   * Array with the task IDs, formatted as a CSV array.
   */
  taskIDs?: Array<string>;
}

export declare namespace Tasks {
  export {
    type Task as Task,
    type TaskStatus as TaskStatus,
    type TaskListResponse as TaskListResponse,
    type TaskListParams as TaskListParams,
  };
}
