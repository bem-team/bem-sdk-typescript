// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'bem-ai-mcp/filtering';
import { Metadata, asTextContentResult } from 'bem-ai-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import BemSDK from 'bem-ai';

export const metadata: Metadata = {
  resource: 'transformations',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/v1-beta/transformations',
  operationId: 'listTransformations',
};

export const tool: Tool = {
  name: 'list_transformations',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nLists all performed transformations, with either pagination or specific reference IDs.\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    totalCount: {\n      type: 'integer',\n      description: 'The total number of results available.'\n    },\n    transformations: {\n      type: 'array',\n      description: 'An array of objects containing the transformations.',\n      items: {\n        type: 'object',\n        properties: {\n          createdAt: {\n            type: 'string',\n            description: 'Timestamp indicating when the transformation was created.',\n            format: 'date-time'\n          },\n          inputType: {\n            $ref: '#/$defs/input_type'\n          },\n          itemOffset: {\n            type: 'integer',\n            description: 'For CSV transformations, this offset represents starting row of the CSV for which you want to fetch transformations for. For PDF transformations, this offset represents the starting page of the PDF that the transformation pertains to. For pipelines that have `independentDocumentProcessingEnabled` set to `true`. Note that this is zero-indexed.\\n'\n          },\n          pipelineID: {\n            type: 'string',\n            description: 'ID of pipeline that transformed the original input data.'\n          },\n          referenceID: {\n            type: 'string',\n            description: 'The unique ID you use internally to refer to this data point.'\n          },\n          transformationID: {\n            type: 'string',\n            description: 'Unique ID generated by bem following Segment\\'s KSUID conventions.'\n          },\n          transformedContent: {\n            anyOf: [              {\n                type: 'object',\n                description: 'Transformations are packaged into an array of items with the type of the output schema when `independentDocumentProcessingEnabled` is set to `true.\\n',\n                properties: {\n                  output: {\n                    type: 'array',\n                    items: {\n                      $ref: '#/$defs/any_type'\n                    }\n                  }\n                },\n                required: []\n              },\n              {\n                type: 'object'\n              },\n              {\n                type: 'array',\n                items: {\n                  type: 'object'\n                }\n              },\n              {\n                type: 'string'\n              },\n              {\n                type: 'number'\n              },\n              {\n                type: 'boolean'\n              }\n            ],\n            description: 'The transformed content as an object, in the schema defined by the pipeline.'\n          },\n          invalidProperties: {\n            type: 'array',\n            description: 'Highlights any fields missing from transforming the original input data that are marked as `required` in the respective output schema for the pipeline.\\n',\n            items: {\n              type: 'string'\n            }\n          },\n          lastPublishErrorAt: {\n            type: 'string',\n            description: 'Last timestamp indicating when the transform was published via webhook and received a  non-200 response. Set to `null` if on a subsequent retry if the webhook service receives a 200 response.\\n'\n          },\n          publishedAt: {\n            type: 'string',\n            description: 'Timestamp indicating when the transform was published via webhook and received a successful 200 response. Value is `null` if the transformation hasn\\'t been sent.\\n',\n            format: 'date-time'\n          }\n        },\n        required: [          'createdAt',\n          'inputType',\n          'itemOffset',\n          'pipelineID',\n          'referenceID',\n          'transformationID',\n          'transformedContent'\n        ]\n      }\n    }\n  },\n  required: [],\n  $defs: {\n    input_type: {\n      type: 'string',\n      description: 'The input type of the content you\\'re sending for transformation.',\n      enum: [        'email',\n        'pdf',\n        'xlsx',\n        'xls',\n        'docx',\n        'csv',\n        'text',\n        'json',\n        'png',\n        'jpeg',\n        'heic',\n        'heif',\n        'webp',\n        'html',\n        'wav',\n        'mp3',\n        'm4a'\n      ]\n    },\n    any_type: {\n      anyOf: [        {\n          type: 'object'\n        },\n        {\n          type: 'array',\n          items: {\n            type: 'object'\n          }\n        },\n        {\n          type: 'string'\n        },\n        {\n          type: 'number'\n        },\n        {\n          type: 'boolean'\n        }\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      endingBefore: {
        type: 'string',
        description:
          'A cursor to use in pagination. `endingBefore` is a transform ID that defines your place in the list. For example, if you make a list request and receive 50 objects, starting with `tr_2bxoJPNdSD4LgRT4YVC4gt72hlI`, your subsequent call can include `endingBefore=tr_2bxoJPNdSD4LgRT4YVC4gt72hlI` to fetch the previous page of the list.\n',
      },
      itemOffset: {
        type: 'integer',
        description:
          'Filters based on the index of the page of the document you had transformed. For CSV transformations, this offset represents starting row of the CSV for which you want to fetch transformations for. For PDF transformations, this offset represents the starting page of the PDF. This applies for a specific reference ID of a transformation. Note that this only applies if you specify one reference ID in `referenceIDs` and if you have `independentDocumentProcessingEnabled` set to `true` in your pipeline configuration. Note that this is zero-indexed.\n',
      },
      limit: {
        type: 'integer',
        description: 'This specifies a limit on the number of objects to return, ranging between 1 and 100.',
      },
      pipelineID: {
        type: 'string',
        description:
          'The unique ID for a given pipeline. Will filter to just the transformations processed by the given pipeline. If left out, will query over ALL transformations for your account.\n',
      },
      published: {
        type: 'boolean',
        description:
          'Boolean that toggles filtering whether or not transformations were successfully published via webhook.\n',
      },
      publishedAfter: {
        type: 'string',
        description:
          'Filters to transformations successfully published via webhook after the specified date. Must be in RFC 3339 format.\n',
        format: 'date-time',
      },
      publishedBefore: {
        type: 'string',
        description:
          'Filters to transformations successfully published via webhook before the specified date. Must be in RFC 3339 format.\n',
        format: 'date-time',
      },
      referenceIDs: {
        type: 'array',
        description: 'Array with the reference IDs of the transformed data points. Formatted as a CSV array.',
        items: {
          type: 'string',
        },
      },
      sortOrder: {
        type: 'string',
        description:
          'Specifies sorting behavior. The two options are `asc` and `desc` to sort ascending and descending respectively, with default sort being ascending. Paging works in both directions.',
        enum: ['asc', 'desc'],
      },
      startingAfter: {
        type: 'string',
        description:
          'A cursor to use in pagination. `startingAfter` is a transform ID that defines your place in the list. For example, if you make a list request and receive 50 objects, ending with `tr_2bxoJPNdSD4LgRT4YVC4gt72hlI`, your subsequent call can include `startingAfter=tr_2bxoJPNdSD4LgRT4YVC4gt72hlI` to fetch the next page of the list.\n',
      },
      transformationIDs: {
        type: 'array',
        description: 'Array with the transform IDs of the transformed data points. Formatted as a CSV array.',
        items: {
          type: 'string',
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: BemSDK, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await maybeFilter(args, await client.transformations.list(body)));
};

export default { metadata, tool, handler };
