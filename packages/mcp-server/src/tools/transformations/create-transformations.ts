// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'bem-ai-mcp/filtering';
import { asTextContentResult } from 'bem-ai-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../';
import BemSDK from 'bem-ai';

export const metadata: Metadata = {
  resource: 'transformations',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/v1-beta/transformations',
  operationId: 'createTransformations',
};

export const tool: Tool = {
  name: 'create_transformations',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nCreates a batch of new transformations, each with a content and input type, and queues them up in bem's servers. Bem supports both `application/json` and `multipart/form-data` requests, where the latter is useful for large files.\n\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    transformations: {\n      type: 'array',\n      description: 'An array of transformations that have been created or de-duplicated by reference.',\n      items: {\n        type: 'object',\n        properties: {\n          referenceID: {\n            type: 'string',\n            description: 'The unique ID you use internally to refer to this data point.'\n          },\n          task_create_status: {\n            type: 'string',\n            description: 'Whether the task is a newly created task or a duplicate task.'\n          },\n          taskID: {\n            type: 'string',\n            description: 'Task ID generated by bem to track the status of this transformation request using the tasks API.'\n          }\n        },\n        required: []\n      }\n    }\n  },\n  required: []\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      pipelineID: {
        type: 'string',
        description: 'ID of the desired pipeline to transform the input content. Generated by bem.',
      },
      transformations: {
        type: 'array',
        description: 'An array of objects containing all the transformations you want to create.',
        items: {
          type: 'object',
          properties: {
            inputContent: {
              type: 'string',
              description:
                'The file content you want to transform as a base64 URL-encoded string. If the `inputType` is `email`, this is equivalent to the raw  format returned by the Gmail API.\n',
            },
            inputType: {
              $ref: '#/$defs/input_type',
            },
            referenceID: {
              type: 'string',
              description:
                'The unique ID you use internally to refer to this data point. Upon successful transformation, we will return it to you with the transformed content, so you can associate inputs and outputs.\n',
            },
          },
          required: ['inputContent', 'inputType', 'referenceID'],
        },
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    $defs: {
      input_type: {
        type: 'string',
        description: "The input type of the content you're sending for transformation.",
        enum: [
          'email',
          'pdf',
          'xlsx',
          'xls',
          'docx',
          'csv',
          'text',
          'json',
          'png',
          'jpeg',
          'heic',
          'heif',
          'webp',
          'html',
          'wav',
          'mp3',
          'm4a',
        ],
      },
    },
  },
};

export const handler = async (client: BemSDK, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await maybeFilter(args, await client.transformations.create(body)));
};

export default { metadata, tool, handler };
