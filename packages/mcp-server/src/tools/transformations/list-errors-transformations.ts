// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'bem-ai-mcp/filtering';
import { Metadata, asTextContentResult } from 'bem-ai-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import BemSDK from 'bem-ai';

export const metadata: Metadata = {
  resource: 'transformations',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/v1-beta/transformations/errors',
  operationId: 'listTransformationErrors',
};

export const tool: Tool = {
  name: 'list_errors_transformations',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nLists all errors encountered while attempting to transform data, with either pagination or specific reference IDs.\n\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    totalCount: {\n      type: 'integer',\n      description: 'The total number of results available.'\n    },\n    transformationErrors: {\n      type: 'array',\n      description: 'An array of objects containing the transformation errors.',\n      items: {\n        type: 'object',\n        properties: {\n          message: {\n            type: 'string',\n            description: 'Message describing the error encountered while attempting to transform the original input data.'\n          },\n          pipelineID: {\n            type: 'string',\n            description: 'ID of pipeline that was used to attempt to transform the original input data.'\n          },\n          referenceID: {\n            type: 'string',\n            description: 'The unique ID you use internally to refer to this data point.'\n          },\n          timestamp: {\n            type: 'string',\n            description: 'Timestamp indicating when the transformation was created.',\n            format: 'date-time'\n          },\n          transformationErrorID: {\n            type: 'string',\n            description: 'Unique ID of this error generated by bem following Segment\\'s KSUID conventions.'\n          }\n        },\n        required: [          'message',\n          'pipelineID',\n          'referenceID',\n          'timestamp',\n          'transformationErrorID'\n        ]\n      }\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      referenceIDs: {
        type: 'array',
        description: 'Array with the reference IDs of the transformed data points. Formatted as a CSV array.',
        items: {
          type: 'string',
        },
      },
      endingBefore: {
        type: 'string',
        description:
          'A cursor to use in pagination. `endingBefore` is a transform ID that defines your place in the list. For example, if you make a list request and receive 50 objects, starting with `tr_2bxoJPNdSD4LgRT4YVC4gt72hlI`, your subsequent call can include `endingBefore=tr_2bxoJPNdSD4LgRT4YVC4gt72hlI` to fetch the previous page of the list.\n',
      },
      limit: {
        type: 'integer',
        description: 'This specifies a limit on the number of objects to return, ranging between 1 and 100.',
      },
      pipelineID: {
        type: 'string',
        description:
          'The unique ID for a given pipeline. Will filter to just the transformations processed by the given pipeline. If left out, will query over ALL transformations for your account.\n',
      },
      sortOrder: {
        type: 'string',
        description:
          'Specifies sorting behavior. The two options are `asc` and `desc` to sort ascending and descending respectively, with default sort being ascending. Paging works in both directions.',
        enum: ['asc', 'desc'],
      },
      startingAfter: {
        type: 'string',
        description:
          'A cursor to use in pagination. `startingAfter` is a transform ID that defines your place in the list. For example, if you make a list request and receive 50 objects, ending with `tr_2bxoJPNdSD4LgRT4YVC4gt72hlI`, your subsequent call can include `startingAfter=tr_2bxoJPNdSD4LgRT4YVC4gt72hlI` to fetch the next page of the list.\n',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['referenceIDs'],
  },
};

export const handler = async (client: BemSDK, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await maybeFilter(args, await client.transformations.listErrors(body)));
};

export default { metadata, tool, handler };
