// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from 'bem-ai-mcp/filtering';
import { Metadata, asTextContentResult } from 'bem-ai-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import BemSDK from 'bem-ai';

export const metadata: Metadata = {
  resource: 'events',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/v1-alpha/events',
  operationId: 'listEvents',
};

export const tool: Tool = {
  name: 'list_events',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nList Events\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    events: {\n      type: 'array',\n      items: {\n        $ref: '#/$defs/event'\n      }\n    },\n    totalCount: {\n      type: 'integer',\n      description: 'The total number of results available.'\n    }\n  },\n  required: [],\n  $defs: {\n    event: {\n      anyOf: [        {\n          allOf: [            {\n              $ref: '#/$defs/event_base'\n            }\n          ]\n        },\n        {\n          allOf: [            {\n              $ref: '#/$defs/event_base'\n            }\n          ]\n        },\n        {\n          allOf: [            {\n              $ref: '#/$defs/event_base'\n            }\n          ]\n        },\n        {\n          allOf: [            {\n              $ref: '#/$defs/event_base'\n            }\n          ]\n        },\n        {\n          allOf: [            {\n              $ref: '#/$defs/event_base'\n            }\n          ]\n        },\n        {\n          allOf: [            {\n              $ref: '#/$defs/event_base'\n            }\n          ]\n        }\n      ]\n    },\n    event_base: {\n      type: 'object',\n      properties: {\n        eventID: {\n          type: 'string',\n          description: 'Unique ID generated by bem to identify the event.'\n        },\n        referenceID: {\n          type: 'string',\n          description: 'The unique ID you use internally to refer to this data point, propagated from the original action input.'\n        }\n      },\n      required: [        'eventID',\n        'referenceID'\n      ]\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      actionTypeConfigIDs: {
        type: 'array',
        items: {
          type: 'string',
        },
      },
      endingBefore: {
        type: 'string',
        description:
          'A cursor to use in pagination. `endingBefore` is an event ID that defines your place in the list.\n',
      },
      eventIDs: {
        type: 'array',
        items: {
          type: 'string',
        },
      },
      eventTypes: {
        type: 'array',
        items: {
          type: 'string',
          description: 'The type of the event.',
          enum: ['transform', 'route', 'split_collection', 'split_item', 'error', 'join'],
        },
      },
      limit: {
        type: 'integer',
      },
      referenceIDs: {
        type: 'array',
        items: {
          type: 'string',
        },
      },
      sortOrder: {
        type: 'string',
        description:
          'Specifies sorting behavior. The two options are `asc` and `desc` to sort ascending and descending respectively, with default sort being ascending. Paging works in both directions.',
        enum: ['asc', 'desc'],
      },
      startingAfter: {
        type: 'string',
        description:
          'A cursor to use in pagination. `startingAfter` is an event ID that defines your place in the list.\n',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
  },
};

export const handler = async (client: BemSDK, args: Record<string, unknown> | undefined) => {
  const body = args as any;
  return asTextContentResult(await maybeFilter(args, await client.events.list(body)));
};

export default { metadata, tool, handler };
